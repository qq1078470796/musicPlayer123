/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JProgressBar;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import database.Crud;
import main.FrameChange;
import main.TakeFrameSmall;
import musicPlayer.OpenMusic;
import musicPlayer.PlayKinds;
import musicPlayer.PlayList;
import musicPlayer.PlayMusic;
import musicPlayer.PreMusicAndNextMusic;
import musicPlayer.SongInfos;
import musicPlayer.TimeProgressBar;
import musicPlayer.VoiceTool;

/**
 *
 * @author asus pc
 */
public class NewMainFrame extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 8288353610760837281L;
	/**
     * Creates new form NewJFrame
     */
    public NewMainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	Crud database = new Crud();
 		PlayMusic p = new PlayMusic();
 		OpenMusic op = new OpenMusic();
 		PreMusicAndNextMusic pn = new PreMusicAndNextMusic();
 		TakeFrameSmall takeFSmall = new TakeFrameSmall();
 		SongInfos infos=new SongInfos();
 		VoiceTool vc = new VoiceTool();
 		PlayList plist=new PlayList();
 		
 		for(int i=0;i<5;i++){
        	infoss[i]=new JLabel("");
        }
 		
    	jPanel1 = new javax.swing.JPanel();
        reminderSong = new javax.swing.JLabel();
        songName = new javax.swing.JLabel();
        reminderVoice = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        musicPlay = new javax.swing.JScrollPane();
        reminderPlayList = new javax.swing.JLabel();
        reminderPlayKind = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
       
        start = new javax.swing.JButton();
        pre = new javax.swing.JButton();
        next = new javax.swing.JButton();
        voiceTool =vc.getVoiceTool();
        startTime = new javax.swing.JLabel();
        endTime = new javax.swing.JLabel();
        noVoice = new javax.swing.JButton();
        PlayBar = new javax.swing.JSlider();
        pause = new javax.swing.JButton();
        resume = new javax.swing.JButton();
        end = new javax.swing.JButton();
        MusicPlayList = new javax.swing.JList();
        select = new javax.swing.JComboBox();
        
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fileRead = new javax.swing.JMenuItem();
        Change=new JMenuItem();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        
        op.setSongInformation(database.getAll());
		OpenMusic.setLenth(database.getLenth());// 获取数据库中存放的歌曲信息
		
		DefaultListModel<String> model=new DefaultListModel<String>();
		JList MusicPlayList=new JList(model);
		
		musicPlay.setViewportView(MusicPlayList);  
		plist.setScrollSongList(musicPlay);
		plist.setMlist(MusicPlayList);
		plist.setMusicModel(model);
		plist.MusicInit(database.getAll(),database.getLenth());//数据库信息存入待播放面板
		
		PlayKinds pl = new PlayKinds();
		op.sysoAll();//测试
		
		timerProgressBar = new TimeProgressBar();
		
		p.setTime((TimeProgressBar) timerProgressBar);
		timerProgressBar.setStringPainted(true);
		p.setGoingMusic(PlayBar);
		System.out.println(op.getLenth());
		System.out.println(musicPlayer.PlayMusic.getNowsMusic());
		select.setModel(new DefaultComboBoxModel(new String[] { "单曲播放", "单曲循环", "顺序播放", "列表循环", "随机播放" }));
		((TimeProgressBar) timerProgressBar).setCurrentTimeCountLabel(startTime);
        

        start.setText("播放");
        start.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				p.playThread = new Thread(new Runnable() {
					
					@Override
					public void run() {
						//初始化歌词为空
						infos.setInfos(new HashMap<String,String>());
						URL url = null;
						try {
							//从待播放列表中取出歌曲的目录位置
							url = new URL(op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].getSongDataUrl());
							System.out.println(url.toString());
						} catch (MalformedURLException e1) {
							// TODO 自动生成的 catch 块
							e1.printStackTrace();
						}
						//获取歌曲的总时间
						int thisMusicTime = op.getAudioTrackLength(url);
						//设置待播放列表的总时间
						op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].setTotalTime(thisMusicTime);
						//播放线程读入歌曲目录
						p.load(url);
						//结束时间的文字设置为结束时间
						endTime.setText(op.getAudioTotalTime(thisMusicTime));
						
						//System.out.println("当前位置"+musicPlayer.PlayMusic.getNowsMusic());
						System.out.println(musicPlayer.PlayMusic.getNowsMusic()+"size"+op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].getDataSize());
						if(op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].getDataSize()!=0.0){
							p.setNeedBuildFirst(false);
							System.out.println("进入----");
							p.setFullByte(op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].getDataSize());
						}
						else p.setNeedBuildFirst(true);
						
						p.setThisMusicTime(thisMusicTime);
						System.out.println("未播放前"+p.getFullByte());
						
						
						infos.read(new File(op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].getLrcUrl()));
						
						((TimeProgressBar) timerProgressBar).setInfos(infos);//放入歌词
						((TimeProgressBar) timerProgressBar).setInfoss(infoss);//放入歌词面板
						
						((TimeProgressBar) timerProgressBar).StartNewMusicTime(thisMusicTime);
						TimeProgressBar.setTimerPause(true);
						
						p.play();
						
						op.getSongInformation()[musicPlayer.PlayMusic.getNowsMusic()].setDataSize(p.getFullByte());
						System.out.println(p.getFullByte());
						op.updateDataBase();
						System.out.println("该切换播放模式了");
						pl.switchKind(start, next);
						System.out.println("切换完了");
					}
				});
				p.playThread.start();
				
			}
		});
       
        pause.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.out.println("pause");
				p.IsPause = true;
				
			}
		});
        
		resume.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.out.println("resume");
				p.resume();
				
			}
		});
		
		end.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				System.out.println("end");
				p.end();
				p.setFullByte(0);
				
			}
		});
		fileRead.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				op.getFile();
				op.saveMusicIntoList();
				int l=op.getLenth()-1;
				System.out.println(l);
				plist.addNewMusicInMusicList(op.getSongInformation()[l]);
			}
		});

        pre.setText("上一曲");
        pre.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				
				end.doClick();
				pn.getPreMusic();
				start.doClick();
			}
		});

        next.setText("下一曲");
        next.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				
				end.doClick();
				pn.getNextMusic();
				start.doClick();
			}
		});
        voiceTool.addChangeListener(new ChangeListener() {

			@Override
			public void stateChanged(ChangeEvent arg0) {
				PlayMusic.setFloatVoiceControl(voiceTool.getValue());

			}
		});
		noVoice.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				vc.stopMusicVoice();

			}
		});
		select.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				pl.setId(select.getSelectedIndex() + 1);
				System.out.println("现在的播放状态为" + (select.getSelectedIndex() + 1));

			}
		});
		plist.getMlist().addListSelectionListener(new ListSelectionListener(){  
            @Override  
            public void valueChanged(ListSelectionEvent e) { 
                if(!plist.getMlist().getValueIsAdjusting()){   //设置只有释放鼠标时才触发  
                    System.out.println(plist.getMlist().getSelectedValue()); 
                    for(int i=0;i<OpenMusic.getLenth();i++){
                    	if(plist.getMlist().getSelectedValue().equals(op.getSongInformation()[i].getSong())){
                    		end.doClick();
//                    		if(pl.getId()==4||pl.getId()==3){
//                    			PlayMusic.setNowsMusic(i-1);
//                    		}
                    		PlayMusic.setNowsMusic(i);
                    		start.doClick();
                    	}
                    }
                    
                }  
            }  
        });
		PlayBar.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent e) {
				if(p.getGoingMusicWZ()<PlayBar.getValue())
				p.isPushNext=true;
				else p.isPushPre=true;
				TimeProgressBar.setTimerPause(true);
				
			}
			
			@Override
			public void mousePressed(MouseEvent e) {
				p.setGoingMusicWZ(PlayBar.getValue());
				System.out.println("摁下前"+p.getGoingMusicWZ());
				
			}
			
			@Override
			public void mouseExited(MouseEvent e) {
				// TODO 自动生成的方法存根
				
			}
			
			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO 自动生成的方法存根
				
			}
			
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO 自动生成的方法存根
				
			}
		});
		Change.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				int i=(int) (Math.random()*10%4)+1;
				FrameChange.FrameC(i);
				
			}
		});

        reminderSong.setText("正在播放");

        songName.setText("歌曲名字");

        startTime.setText("00:00");

        endTime.setText("00:00");

        reminderVoice.setText("音量调节");

        noVoice.setText("静音");

        jLabel6.setText("可调戏的进度条");

        pause.setText("暂停");

        resume.setText("恢复");

        end.setText("结束");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(reminderSong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(songName, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(startTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(PlayBar, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                                    .addComponent(timerProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(endTime))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(pre)
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(pause)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(resume))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(start)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(end)))
                                .addGap(49, 49, 49)
                                .addComponent(next)))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(noVoice)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(reminderVoice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(voiceTool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reminderSong)
                            .addComponent(songName))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(voiceTool, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startTime)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(timerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PlayBar, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reminderVoice)
                            .addComponent(endTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noVoice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pre)
                    .addComponent(start)
                    .addComponent(end)
                    .addComponent(next))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pause)
                    .addComponent(resume)))
        );

        reminderPlayList.setText("歌单");


        reminderPlayKind.setText("播放模式");

 

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(reminderPlayKind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(reminderPlayList)
                .addGap(18, 18, 18)
                .addComponent(musicPlay, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reminderPlayList)
                    .addComponent(reminderPlayKind)
                    .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(220, 220, 220))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(musicPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );


        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoss[0], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoss[1], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(infoss[2], javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                            .addComponent(infoss[3], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(infoss[4], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(infoss[0])
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(infoss[1])
                .addGap(30, 30, 30)
                .addComponent(infoss[2])
                .addGap(30, 30, 30)
                .addComponent(infoss[3])
                .addGap(27, 27, 27)
                .addComponent(infoss[4])
                .addGap(38, 38, 38))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {infoss[0], infoss[1], infoss[2], infoss[3], infoss[4]});

        jMenu1.setText("文件");

        fileRead.setText("打开文件");
        jMenu1.add(fileRead);
        Change.setText("切换风格");
        jMenu1.add(Change);
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>                        

    private void preActionPerformed(java.awt.event.ActionEvent evt) {                                    
        // TODO add your handling code here:
    }                                   

    private void startActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {                                     
        // TODO add your handling code here:
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JList MusicPlayList;
    private javax.swing.JSlider PlayBar;
    private javax.swing.JButton end;
    private javax.swing.JLabel endTime;
    private javax.swing.JLabel [] infoss=new JLabel[5];
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane musicPlay;
    private javax.swing.JButton next;
    private javax.swing.JButton noVoice;
    private javax.swing.JButton pause;
    private javax.swing.JButton pre;
    private javax.swing.JLabel reminderPlayKind;
    private javax.swing.JLabel reminderPlayList;
    private javax.swing.JLabel reminderSong;
    private javax.swing.JLabel reminderVoice;
    private javax.swing.JButton resume;
    private javax.swing.JComboBox select;
    private javax.swing.JLabel songName;
    private javax.swing.JButton start;
    private javax.swing.JLabel startTime;
    private JProgressBar timerProgressBar;
    private javax.swing.JSlider voiceTool;
    
    private javax.swing.JMenuItem fileRead;
    private javax.swing.JMenuItem Change;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
 
    // End of variables declaration                   
}
